/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.mpicbg.sqeazyio;

import io.scif.img.IO;
import io.scif.config.SCIFIOConfig;
import io.scif.io.RandomAccessInputStream;
import io.scif.ImageMetadata;
import io.scif.FormatException;

import java.net.URISyntaxException;
import java.net.URL;
import java.io.IOException;
import java.nio.file.*;
import java.nio.ByteOrder;
import java.nio.ByteBuffer;

import org.junit.Test;
import org.junit.After;
import org.junit.Before;
import org.junit.AfterClass;
import org.junit.BeforeClass;

import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

import org.scijava.Context;
import net.imagej.axis.Axes;

import org.bridj.Pointer;
import org.bridj.PointerIO;
import org.bridj.CLong;
import static org.bridj.Pointer.*;
import sqeazy.bindings.SqeazyLibrary;

import de.mpicbg.sqeazyio.SqeazyFormat.Parser;
//import de.mpicbg.sqeazyio.SqeazyFormat.Reader;
import de.mpicbg.sqeazyio.SqeazyFormat.Metadata;
import de.mpicbg.sqeazyio.SqeazyFormat;

public class SQYParserTest {

    private static final Context context = new Context();
	private static final SqeazyFormat format = new SqeazyFormat();
	private static SqeazyFormat.Reader reader;
	private static SqeazyFormat.Parser parser;
	private static final SqeazyFormat.Checker checker = new SqeazyFormat.Checker();

    @BeforeClass
	public static void oneTimeSetup() throws Exception {
		format.setContext(context);
		reader = (SqeazyFormat.Reader) format.createReader();
		parser = (SqeazyFormat.Parser) format.createParser();
	}

	@Before
	public void setUp() throws Exception {}

	@AfterClass
	public static void oneTimeTearDown() {
		context.dispose();
	}

    @Test public void testByteBufferOnUI16() throws FormatException {

        final byte[] array = { (byte)100, (byte)0, (byte)0, (byte)1 };

        final ByteBuffer buf = ByteBuffer.wrap(array).order(ByteOrder.LITTLE_ENDIAN);
        assertEquals(4, buf.capacity());

        assertEquals((short)100, buf.getShort(0));
        assertNotEquals((short)256, buf.getShort(1));

        assertEquals((short)100, buf.asShortBuffer().get(0));
        assertEquals((short)256, buf.asShortBuffer().get(1));

    }

    @Test public void testBytePointer_toUI16_tobytes() throws FormatException {

        final byte[] array = { (byte)100, (byte)0, (byte)0, (byte)1 };
        assertEquals((byte)100, array[0]);
        assertEquals((byte)1, array[3]);

        final Pointer<Byte> buf = pointerToBytes(array);
        assertEquals(100, buf.getByteAtIndex(0));
        assertEquals(  0, buf.getByteAtIndex(1));
        assertEquals(  1, buf.getByteAtIndex(3));
        assertEquals(  ByteOrder.LITTLE_ENDIAN, buf.order());

        assertEquals((short)100, buf.getShortBuffer(2).get(0));
        assertEquals((short)256, buf.getShortBuffer(2).get(1));

        assertEquals((short)100, buf.getShorts()[0]);
        assertEquals((short)256, buf.getShorts()[1]);

        assertEquals((short)100, buf.getShortAtIndex(0));
        assertEquals((short)256, buf.getShortAtIndex(1));

        final ByteBuffer bybuf = buf.getByteBuffer(array.length);
        final byte[] recoded = new byte[array.length];
        bybuf.get(recoded);

        assertEquals(recoded[1], array[1]);
        assertEquals(recoded[2], array[2]);

        final ByteBuffer lasttwo = ByteBuffer.wrap(buf.getBytesAtOffset(2L,2));
        assertEquals(lasttwo.get(0), array[2]);
        assertEquals(lasttwo.get(1), array[3]);
    }

    @Test public void testPointerShort_from_shortArray() throws FormatException {

        final short[] array = { (short)100, (short)101, (short)96, (short)256 };
        final Pointer<Short> sptr = pointerToShorts(array);
        assertEquals(sptr.order(),ByteOrder.LITTLE_ENDIAN);
        assertEquals(true,sptr.isOrdered());

        final Pointer<Byte> ptr = sptr.as(PointerIO.getByteInstance());
        assertEquals(ptr.order(),ByteOrder.LITTLE_ENDIAN);

        assertEquals(ptr.getByteBuffer().capacity(),8);
        assertNotEquals((byte)0, (byte)sptr.getByteBuffer().order(ByteOrder.BIG_ENDIAN).get(0));
        assertNotEquals((byte)100,(byte)sptr.getByteBuffer().order(ByteOrder.BIG_ENDIAN).get(1));
        assertEquals((byte)100, (byte)sptr.getByteBuffer().order(ByteOrder.LITTLE_ENDIAN).get(0));
        assertEquals((byte)0,(byte)sptr.getByteBuffer().order(ByteOrder.LITTLE_ENDIAN).get(1));
        assertEquals((byte)100, (byte)sptr.getByteBuffer().get(0));
        assertEquals((byte)0,(byte)sptr.getByteBuffer().get(1));

        assertEquals((byte)100, (byte)ptr.getByteBuffer().order(ByteOrder.LITTLE_ENDIAN).get(0));
        assertEquals((byte)0,(byte)ptr.getByteBuffer().order(ByteOrder.LITTLE_ENDIAN).get(1));
        assertEquals((byte)100, (byte)ptr.getByteBuffer().get(0));
        assertEquals((byte)0,(byte)ptr.getByteBuffer().get(1));

        assertEquals((short)100,sptr.getByteBuffer().getShort(0));
        assertNotEquals((short)101,sptr.getByteBuffer().getShort(1));
        assertNotEquals((short)96,sptr.getByteBuffer().getShort(2));
        assertNotEquals((short)256,sptr.getByteBuffer().getShort(3));

    }

    @Test public void testByteBuffer_from_shortArray() throws FormatException {
        final short[] array = { (short)100, (short)101, (short)96, (short)256 };
        final ByteBuffer shorts = ByteBuffer.allocateDirect(array.length*2).order(ByteOrder.LITTLE_ENDIAN);

        for(int i = 0;i<array.length;i++){
            shorts.putShort(array[i]);
        }

        assertEquals((byte)100, (byte)shorts.get(0));
        assertEquals((byte)0,(byte)shorts.get(1));
        assertEquals((byte)101, (byte)shorts.get(2));
        assertEquals((byte)0,(byte)shorts.get(3));
        assertEquals((byte)96, (byte)shorts.get(4));
        assertEquals((byte)0,(byte)shorts.get(5));
        assertEquals((byte)0, (byte)shorts.get(6));
        assertEquals((byte)1,(byte)shorts.get(7));
    }

    @Test public void testCorrectWidthHeight() throws IOException, FormatException, URISyntaxException {

        final URL tiny = getClass().getResource("flybrain.sqy");
        assertNotEquals(tiny,null);

        final Path fnio = Paths.get(tiny.toURI());

        assert(fnio.endsWith("flybrain.sqy"));
        assertEquals(Files.isRegularFile(fnio), true);

        final SqeazyFormat.Metadata sqyMeta = new SqeazyFormat.Metadata();
        final RandomAccessInputStream stream = new RandomAccessInputStream(context, fnio.toString());
        int blockLen = 4 << 10;
        if( stream.length() > blockLen ){
            blockLen = (int)stream.length();
        }
        final String data = stream.readString(blockLen);
        assertThat(data, containsString("pipename"));
        assertThat(data, containsString("rank"));
        final SCIFIOConfig config = new SCIFIOConfig();

        assertNotEquals(stream, null);
		assertNotEquals(reader, null);

        reader.setSource(stream);
        parser.typedParse(stream, sqyMeta, config);

// VERIFY
        assertEquals(256, sqyMeta.getSizeX());
		assertEquals(256, sqyMeta.getSizeY());
        assertEquals(57, sqyMeta.getSizeZ());

        final ImageMetadata iMeta = sqyMeta.get(0);

        assertEquals(57, iMeta.getAxisLength(Axes.Z));

    }

        @Test public void testCorrectness_UI16() throws IOException, FormatException, URISyntaxException {

        final URL tiny = getClass().getResource("droso.sqy");
        assertNotEquals(tiny,null);
                
        final Path fnio = Paths.get(tiny.toURI());
        assert(fnio.endsWith("droso.sqy"));
        
        assertEquals(Files.isRegularFile(fnio), true);

        final SqeazyFormat.Metadata sqyMeta = new SqeazyFormat.Metadata();
        final RandomAccessInputStream stream = new RandomAccessInputStream(context, fnio.toString());
        int blockLen = 4 << 10;
        if( stream.length() > blockLen ){
            blockLen = (int)stream.length();
        }
        final String data = stream.readString(blockLen);
        assertThat(data, containsString("pipename"));
        assertThat(data, containsString("rank"));
        final SCIFIOConfig config = new SCIFIOConfig();

        assertNotEquals(stream, null);
		assertNotEquals(reader, null);

        reader.setSource(stream);
        parser.typedParse(stream, sqyMeta, config);

// VERIFY
        assertEquals(64, sqyMeta.getSizeX());
		assertEquals(64, sqyMeta.getSizeY());
        assertEquals(81, sqyMeta.getSizeZ());

        final ImageMetadata iMeta = sqyMeta.get(0);

        assertEquals(81, iMeta.getAxisLength(Axes.Z));
        final long nbytes_expected = sqyMeta.getSizeX()*sqyMeta.getSizeY()*sqyMeta.getSizeZ()*2;
        assertEquals(sqyMeta.getData().getValidBytes(), nbytes_expected);

        final ByteBuffer stack_buffer = sqyMeta.getData().getByteBuffer();
        assertEquals(stack_buffer.capacity(), nbytes_expected);

        assertEquals((short)100,sqyMeta.getData().getShortBuffer().get(0));
        assertEquals((short)100,stack_buffer.asShortBuffer().get(0));
        assertEquals((short)100,stack_buffer.getShort(0));

        assertEquals((short)101,sqyMeta.getData().getShortBuffer().get(1));
        assertEquals((short)101,stack_buffer.asShortBuffer().get(1));
        assertNotEquals((short)101,stack_buffer.getShort(1));

        assertEquals((short)96,sqyMeta.getData().getShortBuffer().get(2));
        assertEquals((short)96,stack_buffer.asShortBuffer().get(2));
        assertNotEquals((short)96,stack_buffer.getShort(2));

        assertEquals((short)151,sqyMeta.getData().getShortBuffer().get(48*(sqyMeta.getSizeX()*sqyMeta.getSizeY())+50*sqyMeta.getSizeX() + 33));

    }



}
