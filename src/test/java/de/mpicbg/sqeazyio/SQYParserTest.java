/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.mpicbg.sqeazyio;

import io.scif.img.IO;
import io.scif.config.SCIFIOConfig;
import io.scif.io.RandomAccessInputStream;
import io.scif.ImageMetadata;
import io.scif.FormatException;

import java.net.URL;
import java.io.IOException;
import java.nio.file.*;
import java.nio.ByteBuffer;

import org.junit.Test;
import org.junit.After;
import org.junit.Before;
import org.junit.AfterClass;
import org.junit.BeforeClass;

import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

import org.scijava.Context;
import net.imagej.axis.Axes;

import org.bridj.Pointer;
import org.bridj.CLong;
import static org.bridj.Pointer.*;
import sqeazy.bindings.SqeazyLibrary;

import de.mpicbg.sqeazyio.SqeazyFormat.Parser;
//import de.mpicbg.sqeazyio.SqeazyFormat.Reader;
import de.mpicbg.sqeazyio.SqeazyFormat.Metadata;
import de.mpicbg.sqeazyio.SqeazyFormat;

public class SQYParserTest {

    private static final Context context = new Context();
	private static final SqeazyFormat format = new SqeazyFormat();
	private static SqeazyFormat.Reader reader;
	private static SqeazyFormat.Parser parser;
	private static final SqeazyFormat.Checker checker = new SqeazyFormat.Checker();

    @BeforeClass
	public static void oneTimeSetup() throws Exception {
		format.setContext(context);
		reader = (SqeazyFormat.Reader) format.createReader();
		parser = (SqeazyFormat.Parser) format.createParser();
	}

	@Before
	public void setUp() throws Exception {}

	@AfterClass
	public static void oneTimeTearDown() {
		context.dispose();
	}

    @Test public void testByteBufferOnUI16() throws FormatException {

        final byte[] array = { (byte)0, (byte)100, (byte)1, (byte)0 };
        assertEquals((byte)100, array[1]);

        final ByteBuffer buf = ByteBuffer.wrap(array);
        assertEquals(4, buf.capacity());

        assertEquals(100, buf.getShort(0));
        assertEquals(256, buf.asShortBuffer().get(1));
        assertNotEquals(256, buf.getShort(1));

    }


    @Test public void testCorrectWidthHeight() throws IOException, FormatException {

        final URL tiny = getClass().getResource("flybrain.sqy");
        assertNotEquals(tiny,null);

        final String fpath = tiny.getPath();
        final Path fnio = Paths.get(fpath);
        assertThat(fpath, containsString("de/mpicbg/sqeazyio/flybrain.sqy"));
        assertEquals(Files.isRegularFile(fnio), true);

        final SqeazyFormat.Metadata sqyMeta = new SqeazyFormat.Metadata();
        final RandomAccessInputStream stream = new RandomAccessInputStream(context, fpath);
        final int blockLen = 4 << 10;
        final String data = stream.readString(blockLen);
        assertThat(data, containsString("pipename"));
        assertThat(data, containsString("rank"));
        final SCIFIOConfig config = new SCIFIOConfig();

        assertNotEquals(stream, null);
		assertNotEquals(reader, null);

        reader.setSource(stream);
        parser.typedParse(stream, sqyMeta, config);

// VERIFY
        assertEquals(256, sqyMeta.getSizeX());
		assertEquals(256, sqyMeta.getSizeY());
        assertEquals(57, sqyMeta.getSizeZ());

        final ImageMetadata iMeta = sqyMeta.get(0);

        assertEquals(57, iMeta.getAxisLength(Axes.Z));

    }

        @Test public void testCorrectness_UI16() throws IOException, FormatException {

        final URL tiny = getClass().getResource("droso.sqy");
        assertNotEquals(tiny,null);

        final String fpath = tiny.getPath();
        final Path fnio = Paths.get(fpath);
        assertThat(fpath, containsString("de/mpicbg/sqeazyio/droso.sqy"));
        assertEquals(Files.isRegularFile(fnio), true);

        final SqeazyFormat.Metadata sqyMeta = new SqeazyFormat.Metadata();
        final RandomAccessInputStream stream = new RandomAccessInputStream(context, fpath);
        int blockLen = 4 << 10;
        if( stream.length() > blockLen ){
            blockLen = (int)stream.length();
        }
        final String data = stream.readString(blockLen);
        assertThat(data, containsString("pipename"));
        assertThat(data, containsString("rank"));
        final SCIFIOConfig config = new SCIFIOConfig();

        assertNotEquals(stream, null);
		assertNotEquals(reader, null);

        reader.setSource(stream);
        parser.typedParse(stream, sqyMeta, config);

// VERIFY
        assertEquals(64, sqyMeta.getSizeX());
		assertEquals(64, sqyMeta.getSizeY());
        assertEquals(81, sqyMeta.getSizeZ());

        final ImageMetadata iMeta = sqyMeta.get(0);

        assertEquals(81, iMeta.getAxisLength(Axes.Z));
        final long nbytes_expected = sqyMeta.getSizeX()*sqyMeta.getSizeY()*sqyMeta.getSizeZ()*2;
        assertEquals(sqyMeta.getData().getValidBytes(), nbytes_expected);

        final ByteBuffer stack_buffer = sqyMeta.getData().getByteBuffer();
        assertEquals(stack_buffer.capacity(), nbytes_expected);

        assertEquals((short)100,sqyMeta.getData().getShortBuffer().get(0));
        assertEquals((short)100,stack_buffer.asShortBuffer().get(0));
        assertEquals((short)100,stack_buffer.getShort(0));

        assertEquals((short)101,sqyMeta.getData().getShortBuffer().get(1));
        assertEquals((short)101,stack_buffer.asShortBuffer().get(1));
        assertNotEquals((short)101,stack_buffer.getShort(1));

        assertEquals((short)96,sqyMeta.getData().getShortBuffer().get(2));
        assertEquals((short)96,stack_buffer.asShortBuffer().get(2));
        assertNotEquals((short)96,stack_buffer.getShort(2));


    }



}
